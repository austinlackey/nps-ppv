help()
install.packages("installr")
library(installr)
updateR()
library(shiny); runApp('C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation/ppvDashboard.R')
install.packages("DT")
install.packages("DT")
library(shiny); runApp('C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation/ppvDashboard.R')
install.packages("rlang")
install.packages("rlang")
library(shiny); runApp('C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation/ppvDashboard.R')
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("shiny")
install.packages("rlang")
uninstall.R
uninstall.R()
library(installr)
uninstall.R
uninstall.R()
library(shiny); runApp('C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation/ppvDashboard.R')
install.packages("shinyjs")
shinyApp(
ui = fluidPage(
useShinyjs(),
div(
id = "form",
textInput("name", "Name", "Dean"),
radioButtons("gender", "Gender", c("Male", "Female")),
selectInput("letter", "Favourite letter", LETTERS)
),
actionButton("resetAll", "Reset all"),
actionButton("resetName", "Reset name"),
actionButton("resetGender", "Reset Gender"),
actionButton("resetLetter", "Reset letter")
),
server = function(input, output) {
observeEvent(input$resetName, {
reset("name")
})
observeEvent(input$resetGender, {
reset("gender")
})
observeEvent(input$resetLetter, {
reset("letter")
})
observeEvent(input$resetAll, {
reset("form")
})
}
)
# }
# NOT RUN {
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
div(
id = "form",
textInput("name", "Name", "Dean"),
radioButtons("gender", "Gender", c("Male", "Female")),
selectInput("letter", "Favourite letter", LETTERS)
),
actionButton("resetAll", "Reset all"),
actionButton("resetName", "Reset name"),
actionButton("resetGender", "Reset Gender"),
actionButton("resetLetter", "Reset letter")
),
server = function(input, output) {
observeEvent(input$resetName, {
reset("name")
})
observeEvent(input$resetGender, {
reset("gender")
})
observeEvent(input$resetLetter, {
reset("letter")
})
observeEvent(input$resetAll, {
reset("form")
})
}
)
}
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
div(
id = "form",
textInput("name", "Name", "Dean"),
radioButtons("gender", "Gender", c("Male", "Female")),
selectInput("letter", "Favourite letter", LETTERS)
),
actionButton("resetAll", "Reset all"),
actionButton("resetName", "Reset name"),
actionButton("resetGender", "Reset Gender"),
actionButton("resetLetter", "Reset letter")
),
server = function(input, output) {
observeEvent(input$resetName, {
reset("name")
})
observeEvent(input$resetGender, {
reset("gender")
})
observeEvent(input$resetLetter, {
reset("letter")
})
observeEvent(input$resetAll, {
reset("form")
})
}
)
library(shinyjs)
# NOT RUN {
if (interactive()) {
library(shiny)
library(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(),
div(
id = "form",
textInput("name", "Name", "Dean"),
radioButtons("gender", "Gender", c("Male", "Female")),
selectInput("letter", "Favourite letter", LETTERS)
),
actionButton("resetAll", "Reset all"),
actionButton("resetName", "Reset name"),
actionButton("resetGender", "Reset Gender"),
actionButton("resetLetter", "Reset letter")
),
server = function(input, output) {
observeEvent(input$resetName, {
reset("name")
})
observeEvent(input$resetGender, {
reset("gender")
})
observeEvent(input$resetLetter, {
reset("letter")
})
observeEvent(input$resetAll, {
reset("form")
})
}
)
}
install.packages("scales")
install.packages("plotly")
install.packages("ggthemes")
install.packages("PoissonCI")
install.packages("anytime")
install.packages("shinyWidgets")
devtools::install_github("thomasp85/patchwork")
install.packages("formattable")
a = 7
install.packages("shinysky")
devtools::install_github("AnalytixWare/ShinySky")
install.packages("devtools")
R.version
updateR()
install.packages("installr"); require(installr)}
library(installr)
install.packages("devtools")
install.packages("devtools")
install.packages("installr")
library(installr)
updateR()
devtools::install_github("AnalytixWare/ShinySky")
library(devtools)
devtools::install_github("AnalytixWare/ShinySky")
install_github("AnalytixWare/ShinySky")
options(timeout=9999999)
install_github("AnalytixWare/ShinySky")
install_github("shinysky")
install.packages('dqshiny')
remotes::install_github("daqana/dqshiny")
if (require(devtools)) install.packages("devtools")#if not already installed
devtools::install_github("AnalytixWare/ShinySky")
install.packages("devtools")
devtools::install_github("AnalytixWare/ShinySky")
options(timeout=9999999)
devtools::install_github("AnalytixWare/ShinySky")
options(download.file.method = "libcurl")
devtools::install_github("AnalytixWare/ShinySky")
install_github("AnalytixWare/ShinySky")
library(devtools)
install_github("AnalytixWare/ShinySky")
install.packages("dqshiny")
setRepositories()
install.packages("dqshiny")
ap <- available.packages()
View(ap)
install.packages('dqshiny')
install.packages('dqshiny', dependencies=TRUE, repos='http://cran.rstudio.com/')
updateR()
library(installr)
updateR()
remotes::install_github("daqana/dqshiny")
options(download.file.method = "wininet")
remotes::install_github("daqana/dqshiny")
library(dqshiny)
shiny::runApp(system.file("shiny", "base-features", package = "dqshiny"))
install.packages("rhandsontable")
shiny::runApp(system.file("shiny", "base-features", package = "dqshiny"))
## Only run examples in interactive R sessions
if (interactive()) {
library(shiny)
opts <- sapply(1:100000, function(i) paste0(sample(letters, 9), collapse=""))
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
autocomplete_input("auto1", "Unnamed:", opts, max_options = 1000),
autocomplete_input("auto2", "Named:", max_options = 1000,
structure(opts, names = opts[order(opts)])),
autocomplete_input("auto3", "Big data:", NULL, max_options = 1000,
placeholder = "Big data taking several seconds to load ..."),
actionButton("calc", "Calculate")
), column(3,
tags$label("Value:"), verbatimTextOutput("val1", placeholder = TRUE),
tags$label("Value:"), verbatimTextOutput("val2", placeholder = TRUE)
)
)
),
server = function(input, output, session) {
output$val1 <- renderText(as.character(input$auto1))
output$val2 <- renderText(as.character(input$auto2))
observeEvent(input$calc, {
Sys.sleep(3)
update_autocomplete_input(session, "auto3", placeholder = "Loaded!",
options = rownames(mtcars))
})
}
)
}
shinyApp(
ui = fluidPage(
fluidRow(
column(3,
autocomplete_input("auto1", "Unnamed:", opts, max_options = 1000),
autocomplete_input("auto2", "Named:", max_options = 1000,
structure(opts, names = opts[order(opts)])),
autocomplete_input("auto3", "Big data:", NULL, max_options = 1000,
placeholder = "Big data taking several seconds to load ..."),
actionButton("calc", "Calculate")
), column(3,
tags$label("Value:"), verbatimTextOutput("val1", placeholder = TRUE),
tags$label("Value:"), verbatimTextOutput("val2", placeholder = TRUE)
)
)
),
server = function(input, output, session) {
output$val1 <- renderText(as.character(input$auto1))
output$val2 <- renderText(as.character(input$auto2))
observeEvent(input$calc, {
Sys.sleep(3)
update_autocomplete_input(session, "auto3", placeholder = "Loaded!",
options = rownames(mtcars))
})
}
)
install.packages("tidyverse")
R.version
install.packages("tidyverse")
install.packages("remotes")
library(remotes)
packageVersion("readxl")
install_version("readxl", version="1.4.2")
file.path(R.home("bin"), "R")
library(remotes)
install_version("readxl", version="1.4.2")
install_version("readxl", version="1.4.2")
packageVersion("readxl")
install_version("readxl", version="1.4.1")
shiny::runApp('C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation/Code')
setwd("C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/PPV Study Automation")
runApp('Code')
relWD <- "Code/" # Setting the Relative Working Directory
source(paste(relWD, "ppvFunctions.R", sep="")) # Load the functions
source(paste(relWD, "server.R", sep="")) # Load the server
source(paste(relWD, "ui.R", sep="")) # Load the UI
# Run ShinyApp to start webpage
shinyApp(
ui=dashboardPage(HEADER, SIDEBAR, BODY),
server=SERVER
)
install.packages("readxl")
install.packages("readxl")
relWD <- "Code/" # Setting the Relative Working Directory
source(paste(relWD, "ppvFunctions.R", sep="")) # Load the functions
source(paste(relWD, "server.R", sep="")) # Load the server
source(paste(relWD, "ui.R", sep="")) # Load the UI
# Run ShinyApp to start webpage
shinyApp(
ui=dashboardPage(HEADER, SIDEBAR, BODY),
server=SERVER
)
setwd("~/")
ls
library(readxl)
read_excel("TEST2 January Raw PPV Data - Copy.xlsx", sheet=1)
read_excel("C:\Users\alackey\OneDrive - DOI\Documents\TEST2 January Raw PPV Data - Copy.xlsx", sheet=1)
read_excel("C:/Users/alackey/OneDrive - DOI/Documents/TEST2 January Raw PPV Data - Copy.xlsx", sheet=1)
path <- "C:\Users\alackey\OneDrive - DOI\Desktop\NPS Internship\PPV Study Automation\XXXX January Raw PPV Data.xlsx"
library(readxl)
orig_sheet_one <- readxl::read_xlsx("C:/Users/alackey/OneDrive - DOI/Documents/TEST2 January Raw PPV Data - Copy (4).xlsx", 1)
setwd("C:/Users/alackey/OneDrive - DOI/Desktop/NPS Internship/nps-ppv")
relWD <- "Code/" # Setting the Relative Working Directory
source(paste(relWD, "ppvFunctions.R", sep="")) # Load the functions
source(paste(relWD, "server.R", sep="")) # Load the server
source(paste(relWD, "ui.R", sep="")) # Load the UI
# Run ShinyApp to start webpage
shinyApp(
ui=dashboardPage(HEADER, SIDEBAR, BODY),
server=SERVER
)
